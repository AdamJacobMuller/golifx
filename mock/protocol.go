// Automatically generated by MockGen. DO NOT EDIT!
// Source: protocol/protocol.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/pdf/golifx/common"
	time "time"
)

// Mock of Protocol interface
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *_MockProtocolRecorder
}

// Recorder for MockProtocol (not exported)
type _MockProtocolRecorder struct {
	mock *MockProtocol
}

func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &_MockProtocolRecorder{mock}
	return mock
}

func (_m *MockProtocol) EXPECT() *_MockProtocolRecorder {
	return _m.recorder
}

func (_m *MockProtocol) SetClient(client common.Client) {
	_m.ctrl.Call(_m, "SetClient", client)
}

func (_mr *_MockProtocolRecorder) SetClient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClient", arg0)
}

func (_m *MockProtocol) Discover() error {
	ret := _m.ctrl.Call(_m, "Discover")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProtocolRecorder) Discover() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Discover")
}

func (_m *MockProtocol) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProtocolRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockProtocol) SetPower(state bool) error {
	ret := _m.ctrl.Call(_m, "SetPower", state)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProtocolRecorder) SetPower(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPower", arg0)
}

func (_m *MockProtocol) SetPowerDuration(state bool, duration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetPowerDuration", state, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProtocolRecorder) SetPowerDuration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPowerDuration", arg0, arg1)
}

func (_m *MockProtocol) SetColor(color common.Color, duration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetColor", color, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProtocolRecorder) SetColor(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetColor", arg0, arg1)
}
