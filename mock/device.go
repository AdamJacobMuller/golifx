// Automatically generated by MockGen. DO NOT EDIT!
// Source: common/device.go

package mock

import (
	time "time"

	gomock "github.com/golang/mock/gomock"
	"github.com/pdf/golifx/common"
)

// Mock of Device interface
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *_MockDeviceRecorder
}

// Recorder for MockDevice (not exported)
type _MockDeviceRecorder struct {
	mock *MockDevice
}

func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &_MockDeviceRecorder{mock}
	return mock
}

func (_m *MockDevice) EXPECT() *_MockDeviceRecorder {
	return _m.recorder
}

func (_m *MockDevice) ID() uint64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockDeviceRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockDevice) GetLabel() (string, error) {
	ret := _m.ctrl.Call(_m, "GetLabel")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceRecorder) GetLabel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLabel")
}

func (_m *MockDevice) SetLabel(label string) error {
	ret := _m.ctrl.Call(_m, "SetLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeviceRecorder) SetLabel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLabel", arg0)
}

func (_m *MockDevice) GetPower() (bool, error) {
	ret := _m.ctrl.Call(_m, "GetPower")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceRecorder) GetPower() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPower")
}

func (_m *MockDevice) SetPower(state bool) error {
	ret := _m.ctrl.Call(_m, "SetPower", state)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeviceRecorder) SetPower(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPower", arg0)
}

// Mock of Light interface
type MockLight struct {
	ctrl     *gomock.Controller
	recorder *_MockLightRecorder
}

// Recorder for MockLight (not exported)
type _MockLightRecorder struct {
	mock *MockLight
}

func NewMockLight(ctrl *gomock.Controller) *MockLight {
	mock := &MockLight{ctrl: ctrl}
	mock.recorder = &_MockLightRecorder{mock}
	return mock
}

func (_m *MockLight) EXPECT() *_MockLightRecorder {
	return _m.recorder
}

func (_m *MockLight) ID() uint64 {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockLightRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockLight) GetLabel() (string, error) {
	ret := _m.ctrl.Call(_m, "GetLabel")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLightRecorder) GetLabel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLabel")
}

func (_m *MockLight) SetLabel(label string) error {
	ret := _m.ctrl.Call(_m, "SetLabel", label)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLightRecorder) SetLabel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLabel", arg0)
}

func (_m *MockLight) GetPower() (bool, error) {
	ret := _m.ctrl.Call(_m, "GetPower")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLightRecorder) GetPower() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPower")
}

func (_m *MockLight) SetPower(state bool) error {
	ret := _m.ctrl.Call(_m, "SetPower", state)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLightRecorder) SetPower(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPower", arg0)
}

func (_m *MockLight) SetColor(color common.Color, duration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetColor", color, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLightRecorder) SetColor(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetColor", arg0, arg1)
}

func (_m *MockLight) GetColor() (common.Color, error) {
	ret := _m.ctrl.Call(_m, "GetColor")
	ret0, _ := ret[0].(common.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLightRecorder) GetColor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetColor")
}
